/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';


import {
  RandomCat,
} from 'model/random-cat';


declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface MyCat {
      'cat': RandomCat;
    }

    interface MyComponent {
      'first': string;
      'last': string;
    }
  }


    interface HTMLMyCatElement extends StencilComponents.MyCat, HTMLStencilElement {}

    var HTMLMyCatElement: {
      prototype: HTMLMyCatElement;
      new (): HTMLMyCatElement;
    };
    

    interface HTMLMyComponentElement extends StencilComponents.MyComponent, HTMLStencilElement {}

    var HTMLMyComponentElement: {
      prototype: HTMLMyComponentElement;
      new (): HTMLMyComponentElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'my-cat': JSXElements.MyCatAttributes;
    'my-component': JSXElements.MyComponentAttributes;
    }
  }

  namespace JSXElements {

    export interface MyCatAttributes extends HTMLAttributes {
      'cat'?: RandomCat;
    }

    export interface MyComponentAttributes extends HTMLAttributes {
      'first'?: string;
      'last'?: string;
    }
  }

  interface HTMLElementTagNameMap {
    'my-cat': HTMLMyCatElement
    'my-component': HTMLMyComponentElement
  }

  interface ElementTagNameMap {
    'my-cat': HTMLMyCatElement;
    'my-component': HTMLMyComponentElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;